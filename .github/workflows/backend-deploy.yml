name: Backend CI/CD (App Runner via ECR)

on:
  push:
    branches: [main, backend]
    paths:
      - "backend/**"
      - ".github/workflows/backend-deploy.yml"

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      id-token: write

    env:
      AWS_REGION: ap-south-1
      BACKEND_IMAGE_NAME: movenet-backend-prod
      APP_ENV: prod
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      APP_RUNNER_SERVICE_NAME: movenet-backend-service
      ECR_ACCESS_ROLE_ARN: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/AppRunnerECRAccessRole

    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: üßæ Configure AWS Credentials (Access Key Mode)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: üîê Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: üê≥ Build and Push Docker Image
        run: |
          IMAGE_URI="${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.BACKEND_IMAGE_NAME }}:${GITHUB_SHA}"
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV
          docker build -t $IMAGE_URI ./backend
          docker push $IMAGE_URI

      - name: üöÄ Deploy to App Runner
        run: |
          IMAGE_URI="${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.BACKEND_IMAGE_NAME }}:${GITHUB_SHA}"

          SERVICE_ARN=$(aws apprunner list-services \
            --region ${{ env.AWS_REGION }} \
            --query "ServiceSummaryList[?ServiceName=='${{ env.APP_RUNNER_SERVICE_NAME }}'].ServiceArn" \
            --output text)

          if [ -z "$SERVICE_ARN" ]; then
            echo "üÜï Creating new App Runner service: ${{ env.APP_RUNNER_SERVICE_NAME }}"

            aws apprunner create-service \
              --region ${{ env.AWS_REGION }} \
              --service-name ${{ env.APP_RUNNER_SERVICE_NAME }} \
              --source-configuration "$(jq -n \
                --arg IMAGE_URI "$IMAGE_URI" \
                --arg APP_ENV "${{ env.APP_ENV }}" \
                --arg REGION "${{ env.AWS_REGION }}" \
                --arg ACCOUNT "${{ env.AWS_ACCOUNT_ID }}" \
                --arg ROLE_ARN "${{ env.ECR_ACCESS_ROLE_ARN }}" \
                '{
                  ImageRepository: {
                    ImageIdentifier: $IMAGE_URI,
                    ImageRepositoryType: "ECR",
                    ImageConfiguration: {
                      Port: "8080",
                      RuntimeEnvironmentVariables: {
                        APP_ENV: $APP_ENV,
                        AWS_REGION: $REGION,
                        AWS_ACCOUNT_ID: $ACCOUNT
                      }
                    },
                    AuthenticationConfiguration: {
                      AccessRoleArn: $ROLE_ARN
                    }
                  },
                  AutoDeploymentsEnabled: true
                }')"
          else
            echo "üîÅ Updating existing App Runner service: $SERVICE_ARN"

            aws apprunner update-service \
              --region ${{ env.AWS_REGION }} \
              --service-arn "$SERVICE_ARN" \
              --source-configuration "$(jq -n \
                --arg IMAGE_URI "$IMAGE_URI" \
                --arg APP_ENV "${{ env.APP_ENV }}" \
                --arg REGION "${{ env.AWS_RE_
