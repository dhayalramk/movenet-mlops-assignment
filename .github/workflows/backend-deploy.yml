name: Backend CI/CD (App Runner via ECR)

on:
  push:
    branches: [main, backend]
    paths:
      - "backend/**"
      - ".github/workflows/backend-deploy.yml"

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      id-token: write

    env:
      AWS_REGION: ap-south-1
      BACKEND_IMAGE_NAME: movenet-backend-prod
      APP_ENV: prod
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      APP_RUNNER_SERVICE_NAME: movenet-backend-service

    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 🧾 Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 🔐 Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: 🐳 Build and Push Docker Image
        run: |
          IMAGE_URI="${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.BACKEND_IMAGE_NAME }}:${GITHUB_SHA}"
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV
          docker build -t $IMAGE_URI ./backend
          docker push $IMAGE_URI

      - name: ⚙️ Deploy IAM Role for App Runner
        run: |
          aws cloudformation deploy \
            --template-file cfn/apprunner-ecr-role.yml \
            --stack-name apprunner-ecr-role \
            --capabilities CAPABILITY_NAMED_IAM

      - name: 🧾 Fetch ECR Access Role ARN
        id: get-role
        run: |
          echo "🔍 Trying to fetch AppRunnerECRAccessRoleArn from CloudFormation outputs..."
      
          for i in {1..5}; do
            ROLE_ARN=$(aws cloudformation describe-stacks \
              --stack-name apprunner-ecr-role \
              --region ${{ env.AWS_REGION }} \
              --query "Stacks[0].Outputs[?OutputKey=='AppRunnerECRAccessRoleArn'].OutputValue" \
              --output text)
      
            if [[ "$ROLE_ARN" != "None" && "$ROLE_ARN" != "" ]]; then
              echo "✅ Fetched Role ARN: $ROLE_ARN"
              break
            fi
      
            echo "⏳ Output not ready yet. Retrying in 5s..."
            sleep 5
          done
      
          if [[ "$ROLE_ARN" == "None" || -z "$ROLE_ARN" ]]; then
            echo "❌ ERROR: Role ARN not found in CloudFormation outputs."
            exit 1
          fi
      
          echo "ROLE_ARN=$ROLE_ARN" >> $GITHUB_ENV
          echo "role_arn=$ROLE_ARN" >> $GITHUB_OUTPUT



      - name: 🧹 Cleanup ROLLBACK Stack (if exists)
        run: |
          set +e
          state=$(aws cloudformation describe-stacks \
            --stack-name movenet-apprunner-service \
            --region ${{ env.AWS_REGION }} \
            --query "Stacks[0].StackStatus" --output text 2>/dev/null)
          if [[ "$state" == "ROLLBACK_COMPLETE" ]]; then
            echo "Deleting failed stack..."
            aws cloudformation delete-stack \
              --stack-name movenet-apprunner-service \
              --region ${{ env.AWS_REGION }}
            aws cloudformation wait stack-delete-complete \
              --stack-name movenet-apprunner-service \
              --region ${{ env.AWS_REGION }}
          fi

      
      - name: 🚀 Deploy App Runner via CloudFormation
        run: |
          IMAGE_URI="${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.BACKEND_IMAGE_NAME }}:${GITHUB_SHA}"
      
          aws cloudformation deploy \
            --region ${{ env.AWS_REGION }} \
            --template-file cfn/apprunner-service.yml \
            --stack-name movenet-apprunner-service \
            --capabilities CAPABILITY_IAM \
            --parameter-overrides \
              ImageUri="$IMAGE_URI" \
              RoleArn="${{ steps.get-role.outputs.role_arn }}" \
              AppEnv="${{ env.APP_ENV }}" \
              AppName="${{ env.APP_RUNNER_SERVICE_NAME }}"
